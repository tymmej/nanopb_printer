/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5-dev */

#ifndef PB_SIMPLE_PB_H_INCLUDED
#define PB_SIMPLE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _SimpleEnum1 {
    SimpleEnum1_ONE = 1,
    SimpleEnum1_TWO = 2
} SimpleEnum1;

typedef enum _SimpleEnum2 {
    SimpleEnum2_ONEONE = 1,
    SimpleEnum2_TWOTWO = 2
} SimpleEnum2;

/* Struct definitions */
typedef struct _SimpleMessage1 {
    int32_t lucky_number;
    int32_t unlucky_number;
    SimpleEnum1 enum1;
} SimpleMessage1;

typedef PB_BYTES_ARRAY_T(4) SimpleMessage2_byte_t;
typedef struct _SimpleMessage2 {
    bool has_unlucky_number;
    int64_t unlucky_number;
    bool has_lucky_number;
    int64_t lucky_number;
    bool has_enum1;
    SimpleEnum2 enum1;
    bool has_byte;
    SimpleMessage2_byte_t byte;
} SimpleMessage2;

typedef struct _SimpleNested {
    bool has_nested1;
    SimpleMessage1 nested1;
    SimpleMessage2 nested2;
    SimpleEnum1 enum1;
    SimpleEnum2 enum2;
} SimpleNested;

typedef struct _SimpleOneof {
    pb_size_t which_oneofmsg;
    union {
        SimpleMessage1 msg1;
        int32_t unlucky_number;
    } oneofmsg;
    int64_t notnested;
} SimpleOneof;

typedef struct _SimpleRepeated {
    pb_size_t text_count;
    char text[4][32];
    pb_size_t message_count;
    SimpleMessage1 message[4];
} SimpleRepeated;


/* Helper constants for enums */
#define _SimpleEnum1_MIN SimpleEnum1_ONE
#define _SimpleEnum1_MAX SimpleEnum1_TWO
#define _SimpleEnum1_ARRAYSIZE ((SimpleEnum1)(SimpleEnum1_TWO+1))

#define _SimpleEnum2_MIN SimpleEnum2_ONEONE
#define _SimpleEnum2_MAX SimpleEnum2_TWOTWO
#define _SimpleEnum2_ARRAYSIZE ((SimpleEnum2)(SimpleEnum2_TWOTWO+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SimpleMessage1_init_default              {0, 0, _SimpleEnum1_MIN}
#define SimpleMessage2_init_default              {false, 0, false, 0, false, _SimpleEnum2_MIN, false, {0, {0}}}
#define SimpleNested_init_default                {false, SimpleMessage1_init_default, SimpleMessage2_init_default, _SimpleEnum1_MIN, _SimpleEnum2_MIN}
#define SimpleRepeated_init_default              {0, {"", "", "", ""}, 0, {SimpleMessage1_init_default, SimpleMessage1_init_default, SimpleMessage1_init_default, SimpleMessage1_init_default}}
#define SimpleOneof_init_default                 {0, {SimpleMessage1_init_default}, 0}
#define SimpleMessage1_init_zero                 {0, 0, _SimpleEnum1_MIN}
#define SimpleMessage2_init_zero                 {false, 0, false, 0, false, _SimpleEnum2_MIN, false, {0, {0}}}
#define SimpleNested_init_zero                   {false, SimpleMessage1_init_zero, SimpleMessage2_init_zero, _SimpleEnum1_MIN, _SimpleEnum2_MIN}
#define SimpleRepeated_init_zero                 {0, {"", "", "", ""}, 0, {SimpleMessage1_init_zero, SimpleMessage1_init_zero, SimpleMessage1_init_zero, SimpleMessage1_init_zero}}
#define SimpleOneof_init_zero                    {0, {SimpleMessage1_init_zero}, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SimpleMessage1_lucky_number_tag          1
#define SimpleMessage1_unlucky_number_tag        2
#define SimpleMessage1_enum1_tag                 3
#define SimpleMessage2_unlucky_number_tag        1
#define SimpleMessage2_lucky_number_tag          2
#define SimpleMessage2_enum1_tag                 3
#define SimpleMessage2_byte_tag                  4
#define SimpleNested_nested1_tag                 1
#define SimpleNested_nested2_tag                 2
#define SimpleNested_enum1_tag                   3
#define SimpleNested_enum2_tag                   4
#define SimpleOneof_msg1_tag                     1
#define SimpleOneof_unlucky_number_tag           2
#define SimpleOneof_notnested_tag                3
#define SimpleRepeated_text_tag                  1
#define SimpleRepeated_message_tag               2

/* Struct field encoding specification for nanopb */
#define SimpleMessage1_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    lucky_number,      1) \
X(a, STATIC,   REQUIRED, INT32,    unlucky_number,    2) \
X(a, STATIC,   REQUIRED, UENUM,    enum1,             3)
#define SimpleMessage1_CALLBACK NULL
#define SimpleMessage1_DEFAULT (const pb_byte_t*)"\x18\x01\x00"

#define SimpleMessage2_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT64,    unlucky_number,    1) \
X(a, STATIC,   OPTIONAL, INT64,    lucky_number,      2) \
X(a, STATIC,   OPTIONAL, UENUM,    enum1,             3) \
X(a, STATIC,   OPTIONAL, BYTES,    byte,              4)
#define SimpleMessage2_CALLBACK NULL
#define SimpleMessage2_DEFAULT (const pb_byte_t*)"\x18\x01\x00"

#define SimpleNested_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  nested1,           1) \
X(a, STATIC,   REQUIRED, MESSAGE,  nested2,           2) \
X(a, STATIC,   REQUIRED, UENUM,    enum1,             3) \
X(a, STATIC,   REQUIRED, UENUM,    enum2,             4)
#define SimpleNested_CALLBACK NULL
#define SimpleNested_DEFAULT (const pb_byte_t*)"\x18\x01\x20\x01\x00"
#define SimpleNested_nested1_MSGTYPE SimpleMessage1
#define SimpleNested_nested2_MSGTYPE SimpleMessage2

#define SimpleRepeated_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, STRING,   text,              1) \
X(a, STATIC,   REPEATED, MESSAGE,  message,           2)
#define SimpleRepeated_CALLBACK NULL
#define SimpleRepeated_DEFAULT NULL
#define SimpleRepeated_message_MSGTYPE SimpleMessage1

#define SimpleOneof_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (oneofmsg,msg1,oneofmsg.msg1),   1) \
X(a, STATIC,   ONEOF,    INT32,    (oneofmsg,unlucky_number,oneofmsg.unlucky_number),   2) \
X(a, STATIC,   REQUIRED, INT64,    notnested,         3)
#define SimpleOneof_CALLBACK NULL
#define SimpleOneof_DEFAULT NULL
#define SimpleOneof_oneofmsg_msg1_MSGTYPE SimpleMessage1

extern const pb_msgdesc_t SimpleMessage1_msg;
extern const pb_msgdesc_t SimpleMessage2_msg;
extern const pb_msgdesc_t SimpleNested_msg;
extern const pb_msgdesc_t SimpleRepeated_msg;
extern const pb_msgdesc_t SimpleOneof_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SimpleMessage1_fields &SimpleMessage1_msg
#define SimpleMessage2_fields &SimpleMessage2_msg
#define SimpleNested_fields &SimpleNested_msg
#define SimpleRepeated_fields &SimpleRepeated_msg
#define SimpleOneof_fields &SimpleOneof_msg

/* Maximum encoded size of messages (where known) */
#define SimpleMessage1_size                      24
#define SimpleMessage2_size                      30
#define SimpleNested_size                        62
#define SimpleRepeated_size                      236
#define SimpleOneof_size                         37

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
